name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Mondays
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'


      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --locked --all-extras --dev
          uv pip install "safety<3.0"

      - name: Scan dependencies for vulnerabilities
        run: uv run safety check

  security:
    runs-on: ubuntu-latest
    needs: dependency-analysis
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Install security tools
        run: uv pip install bandit

      - name: Security scan with bandit
        run: uv run bandit -r src/ -f json -o bandit-report.json

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  quality:
    runs-on: ubuntu-latest
    needs: dependency-analysis
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Cache Ruff
        uses: actions/cache@v4
        with:
          path: ~/.cache/ruff
          key: ${{ runner.os }}-ruff-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-ruff-

      - name: Cache MyPy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-mypy-

      - name: Install dependencies
        run: |
          uv sync --locked --all-extras --dev
          uv pip install mypy

      - name: Lint with ruff
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Type check with MyPy
        run: uv run mypy src/

  test:
    runs-on: ubuntu-latest
    needs: [security, quality]
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
        test-type: [unit, integration, e2e]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --locked --all-extras --dev

      - name: Run ${{ matrix.test-type }} tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci-only-not-production
        run: |
          if [ "${{ matrix.test-type }}" == "unit" ]; then
            uv run pytest tests/ -m "not integration and not e2e" --cov=src --cov-report=xml
          elif [ "${{ matrix.test-type }}" == "integration" ]; then
            uv run pytest tests/ -m "integration" --cov=src --cov-report=xml --cov-append
          else
            uv run pytest tests/ -m "e2e" --cov=src --cov-report=xml --cov-append
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: codecov-umbrella

  docker:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.prod
          push: false
          tags: fastapi-app:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test Docker image
        run: |
          docker run --rm fastapi-app:test uv run python -c "import src.main; print('Import successful')"

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: 'image'
          scan-ref: 'fastapi-app:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  performance:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --locked --all-extras --dev

      - name: Run performance tests
        run: |
          # Placeholder for performance testing
          echo "Performance analysis completed"

      - name: Upload performance metrics
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics
          path: performance-report.json